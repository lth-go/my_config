" 关闭vi兼容
set nocompatible

" =====文件=====

" 文件类型检测
filetype plugin indent on

" 设置编码格式
set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,euc-jp,latin1
set encoding=utf-8
set termencoding=utf-8

" 文件修改自动载入
set autoread
" 覆盖文件不备份
set nobackup
" 关闭交换文件
set noswapfile
" 允许有未保存时切换缓冲区
set hidden

" =====命令行=====

" 菜单补全
set completeopt-=preview
" 历史命令容量
set history=2000
" 命令行智能补全
set wildmenu
set wildmode=longest:full,full
" 忽略文件
set wildignore+=*.swp,*.pyc,*.pyo,.idea,.git
" wildmode增强
let &wildcharm = &wildchar
cnoremap <expr> / wildmenumode() ? "\<Down>" : "/"

" =====状态栏=====

" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 显示当前正在输入的命令
set showcmd

" =====行号=====

" 相对行号
set relativenumber number
" 行号切换
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &number | set relativenumber   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &number | set norelativenumber | endif
augroup END

" =====内容=====

" 禁止拆行
set nowrap
" 高亮显示当前行
set cursorline

" 提高画面流畅度
set lazyredraw
set ttyfast

" 禁止折叠
set nofoldenable

" 显示tab跟空格
set list
set listchars=tab:>-,trail:·,nbsp:·

" 指定分割的区域
set splitbelow
set splitright

" 垂直滚动
set scrolloff=10
" 水平滚动
set sidescroll=1
set sidescrolloff=10

" =====搜索=====

" 高亮显示搜索结果
set hlsearch
" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
set smartcase

" =====缩进=====

" 退格键正常处理
set backspace=2
" 智能缩进
set cindent
" 自动缩进
set autoindent
" 制表符占用空格数
set tabstop=4
" 自动缩进距离
set shiftwidth=4
" 连续空格视为制表符
set softtabstop=4
" 按退格键一次删掉4个空格
set smarttab
" 将Tab自动转化成空格
set expandtab
" 智能缩进
set shiftround

" 缩进
autocmd FileType javascript,json,yaml,sh,vim setlocal tabstop=2 shiftwidth=2 softtabstop=2
" Go
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
" proto缩进
autocmd FileType proto setlocal tabstop=4 shiftwidth=4 softtabstop=4
" Git
autocmd FileType git setlocal foldenable
" Markdown
autocmd FileType markdown setlocal wrap

" =====其他=====

" 打开自动定位到最后编辑的位置
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | endif

" =====快捷键=====

" 定义<Leader>
let mapleader=";"
noremap <Space> ;

" 废弃快捷键
noremap <F1> <Nop>
inoremap <F1> <Nop>
" noremap q <Nop>
" noremap Q <Nop>
noremap K <Nop>

" 快速保存及退出
nnoremap <Leader>q :q<CR>
nnoremap <Leader>w :w<CR>
" w!!用sudo保存
cabbrev w!! w !sudo tee > /dev/null %

" 切换布局快捷键
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" 用于绕行
noremap j gj
noremap k gk

" 替换行首行尾快捷键
noremap H ^
noremap L g_

" 命令行模式增强
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <C-D> <Del>

"插入模式增强
inoremap <C-A> <Home>
inoremap <C-E> <End>
inoremap <C-F> <Right>
inoremap <C-B> <Left>
inoremap <C-D> <Del>

" 搜索关键词居中
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
nnoremap <silent> <C-]> <C-]>zz

nnoremap <silent><Backspace> :nohlsearch<CR>

" 调整缩进后自动选中
vnoremap < <gv
vnoremap > >gv

" 复制当前行号
nnoremap <silent> <C-g> :let @+ = join([expand('%'),  line(".")], ':')\|:echo @+<CR>

" ----- start_search 搜索不移动 可视模式高亮选中 -----
function! s:Starsearch_CWord()
  let wordStr = expand("<cword>")
  if strlen(wordStr) == 0 | return | endif
  if wordStr[0] =~ '\<'
    let @/ = '\<' . wordStr . '\>'
  else
    let @/ = wordStr
  endif
  let savedS = @s
  normal! "syiw
  let @s = savedS
  set hlsearch
endfunction

function! s:Starsearch_VWord()
    let savedS = @s
    normal! gv"sy
    let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
    let @s = savedS
    set hlsearch
endfunction

nnoremap <silent> * :set nohlsearch\|:call <SID>Starsearch_CWord()<CR>
vnoremap <silent> * :<C-u>set nohlsearch\|:call <SID>Starsearch_VWord()<CR>

" ----- start_search end -----

" ----- auto_close_buffers -----

function! s:SortTimeStamps(lhs, rhs)
  if a:lhs[1] > a:rhs[1] | return 1 | endif
  if a:lhs[1] < a:rhs[1] | return -1 | endif
  return a:lhs[0] > a:rhs[0]
endfunction

" TODO: fugitive打开的buf不能自动执行
function! s:CloseBuffer(nb_to_keep)
  " 列出所有buffer, 过滤已修改的
  let saved_buffers = filter(range(1, bufnr('$')), 'buflisted(v:val) && !getbufvar(v:val, "&modified")')

  " 过滤当前已打开的buffer
  let window_buffers = map(range(1, winnr('$')), 'winbufnr(v:val)')
  let saved_buffers = filter(saved_buffers, 'index(window_buffers, v:val) == -1')

  " buffer按时间排序
  let buffer_to_time = map(copy(saved_buffers), '[(v:val), getftime(bufname(v:val))]')

  " 关闭未命名buff
  let no_name_buffer = filter(copy(buffer_to_time), 'v:val[1] <= 0 && getbufvar(v:val[0], "&buftype") == ""')
  if len(no_name_buffer) > 0
    exe 'bd ' . join(map(no_name_buffer, 'v:val[0]'), ' ')
  endif

  " 过滤并排序
  call filter(buffer_to_time, 'v:val[1] > 0')
  call sort(buffer_to_time, function('s:SortTimeStamps'))

  " 关闭buffer
  let buffers_to_strip = map(copy(buffer_to_time[:-a:nb_to_keep]), 'v:val[0]')
  if len(buffers_to_strip) > 0 
    exe 'bd ' . join(buffers_to_strip, ' ') 
  endif
endfunction

command! -nargs=1 CloseOldBuffers call s:CloseBuffer(<args>)

" 关闭当前buffer外的其他buffer
nnoremap <Leader>bd :CloseOldBuffers 1<CR>

augroup CloseOldBuffers
  au!
  au BufNew * call s:CloseBuffer(g:nb_buffers_to_keep)
augroup END

" 最大buffer数
let g:nb_buffers_to_keep = 6

" ----- auto_close_buffers end -----

" =====主题=====

" 高亮
syntax enable
" 背景颜色
set background=dark
" 主题
colorscheme desert
