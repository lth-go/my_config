------------------------------------------------------------------------------
左右动作

h		左
l		右
0		至本行第一个字符
^		至本行第一个非空白字符
$		至本行最后一个字符
g0		至屏幕行第一个字符
g^		至屏幕行第一个非空白字符
g$		至屏幕行最后一个字符
gm		至屏幕行中点
|		至第 N 列
f{char}	至右边第 N 次出现 {char} 之处 (find)
F{char}	至左边第 N 次出现 {char} 之处 (Find)
t{char}	至右边第 N 次出现 {char} 之前 (till)
T{char}	至左边第 N 次出现 {char} 之前 (Till)
;		重复上次 "f"、"F"、"t" 或 "T" 命令 N 次
,		以相反方向重复上次 "f"、"F"、"t" 或 "T" 命令 N 次
------------------------------------------------------------------------------
上下动作

k		上移 N 行 (亦: CTRL-P 和 <Up>)
j		下移 N 行 (亦: CTRL-J、CTRL-N、<NL> 和 <Down>)
-		上移 N 行，至第一个非空白字符
+		下移 N 行，至第一个非空白字符 (亦: CTRL-M 和 <CR>)
_		下移 N - 1 行，至第一个非空白字符
G		至第 N 行 (缺省: 末行) 第一个非空白字符
gg		至第 N 行 (缺省: 首行) 第一个非空白字符
%		至全文件行数百分之 N 处；必须给出 N，否则是 |%| 命令
gk		上移 N 屏幕行
gj		下移 N 屏幕行
-----------------------------------------------------------------------
 	文本对象动作

w		向前 (正向，下同) N 个单词
W		向前 N 个空白隔开的字串
e		向前至第 N 个单词词尾
E		向前至第 N 个空白隔开的字串
b		向后 (反向，下同) N 个单词
B		向后至第 N 个空白隔开的字串
ge		向后至第 N 个单词词尾
gE		向后至第 N 个空白隔开的字串

)		向前 N 个句子
(		向后 N 个句子
}		向前 N 个段落
{		向后 N 个段落
]]		向前 N 个小节，置于小节的开始
[[		向后 N 个小节，置于小节的开始
][		向前 N 个小节，置于小节的末尾
[]		向后 N 个小节，置于小节的末尾
[(		向后至第 N 个未闭合的 '('
[{		向后至第 N 个未闭合的 '{'
])		向前至第 N 个未闭合的 ')'
]}		向前至第 N 个未闭合的 '}'
[*		向后至第 N 个注释的开始 "/*"
]*		向前至第 N 个注释的结束 "*/"
------------------------------------------------------------------------------
		模式查找

/{pattern}[/[offset]]<CR> 向前查找第 N 次出现 {pattern} 的地方
?{pattern}[?[offset]]<CR> 向后查找第 N 次出现 {pattern} 的地方
/<CR>	向前重复上次查找
?<CR>	向后重复上次查找
N  n		重复上次查找
N  N		相反方向重复上次查找
*		向前查找光标下的标识符
#		向后查找光标下的标识符
g*		同 "*"，但也查找部分匹配
g#		同 "*"，但也查找部分匹配
gd		至光标下标识符的局部声明
gD		至光标下标识符的全局声明

-----------------------------------------------------------------------------
		位置标记和相关动作

m{a-zA-Z}	用标记 {a-zA-Z} 记录当前位置
`{a-z}	至当前文件中的标记 {a-z}
`{A-Z}	至任何文件中的标记 {A-Z}
`{0-9}	至 Vim 上次退出的位置
``		至上次跳转之前的位置
`"		至上次编辑此文件的位置
`[		至上次被操作或放置的文本的开始
`]		至上次被操作或放置的文本的结尾
`<		至 (前次) 可视区域的开始
`>		至 (前次) 可视区域的结尾
`.		至当前文件最后被改动的位置
'{a-zA-Z0-9[]'"<>.}
同 `，但同时移动至该行的第一个非空白字符
:marks	列出活动的标记
CTRL-O	跳转到跳转表中第 N 个较早的位置
CTRL-I	跳转到跳转表中第 N 个较晚的位置
:ju[mps]	列出跳转表
------------------------------------------------------------------------------
其他动作

%		找到本行中下一个括号、方括号、注释或 "#if"/"#else"/"#endif" 并移动至与其对称的位置
H		至窗口的第 N 行的第一个非空白字符处 
M		至窗口的中间行的第一个非空白字符处 
L		至窗口的第 N 行 (从下方算) 的第一个非空白字符处

go			至缓冲区的第 N 个字节
:[range]go[to] [off]	至缓冲区的第 [off] 个字节
------------------------------------------------------------------------------
 使用标签

:ta[g][!] {tag}	跳转到标签 {tag}
:[count]ta[g][!]	跳转到标签列表里第 [count] 个较新的标签
CTRL-]		跳转到光标下的标签，除非文件被改动
:ts[elect][!] [tag]	列出匹配的标签并选择其中一个跳转
:tj[ump][!] [tag]	跳转到标签 [tag]，当有多个匹配时从列表中选择
:lt[ag][!] [tag]	跳转到标签 [tag] 并把匹配的标签加到位置列表

:tags		显示标签列表
N  CTRL-T		跳转到标签列表中第 N 个较早的标签
:[count]po[p][!]	跳转到标签列表中第 [count] 个较早的标签
:[count]tn[ext][!]	跳转到向下第 [count] 个匹配的标签
:[count]tp[revious][!] 跳转到向上第 [count] 个匹配的标签
:[count]tr[ewind][!] 跳转到第 [count] 个匹配的标签
:tl[ast][!]		跳转到上次匹配的标签

:pt[ag] {tag}	打开一个显示 {tag} 标签的预览窗口
CTRL-W }		同 CTRL-] 但在预览窗口显示标签
:pts[elect]		同 ":tselect" 但在预览窗口显示标签
:ptj[ump]		同 ":tjump" 但在预览窗口显示标签
:pc[lose]		关闭标签预览窗口
CTRL-W z		关闭标签预览窗口
------------------------------------------------------------------------------
屏幕滚动

CTRL-E	窗口下滚 N 行
CTRL-D	窗口下滚 N 行
CTRL-F	窗口下滚 N 页
CTRL-Y	窗口上滚 N 行
CTRL-U	窗口上滚 N 行
CTRL-B	窗口上滚 N 页
zt	当前行置窗口顶端
zz	当前行置窗口正中
zb	当前行置窗口底端

以下仅当 'wrap' 选项关闭时生效:
zh		屏幕右滚 N 个字符
zl		屏幕左滚 N 个字符
zH		屏幕右滚半个屏宽
zL		屏幕左滚半个屏宽
------------------------------------------------------------------------------
插入文本

a	在光标后添加文本
A	在行末添加文本
i	在光标前插入文本
I	在当前行的第一个非空白字符前插入文本
 N  gI	在第一栏中插入文本
o	在当前行下方开始新行，添加文本
O	在当前行上方开始新行，添加文本
:star[tinsert][!]   开始插入模式，当使用 [!] 时添加文本
:startr[eplace][!]  开始替换模式，当使用 [!] 时从行末开始

在可视列块模式下:
I	在所有选中的行之前插入相同的文本
A	在所有选中的行之后添加相同的文本
------------------------------------------------------------------------------
插入模式键


离开插入模式:
<Esc>		  结束插入模式，回到普通模式
CTRL-C		  同 <Esc>，但不使用缩写
CTRL-O {command}  执行命令 {command} 并回到插入模式

移动:
光标键		  左/右/上/下 移动光标
shift-left/right  左/右 移动一个单词
shift-up/down	  后/前 移动一个满屏
<End>		  光标至本行的末字符之后
<Home>		  光标至本行的首字符之上
------------------------------------------------------------------------------
插入模式特殊键

CTRL-V {char}..	  按本义插入字符，或插入十进制数的字节值
<NL> 或 <CR> 或 CTRL-M 或 CTRL-J 开始新行
CTRL-E		  插入光标下方的字符
CTRL-Y		  插入光标上方的字符

CTRL-A		  插入上次插入的文本
CTRL-@		  插入上次插入的文本并结束插入模式
CTRL-R {0-9a-z%#:.-="}	插入寄存器的内容
CTRL-N		  将下一个匹配的标识符插入光标前
CTRL-P		  将上一个匹配的标识符插入光标前
CTRL-X ...	  以各种方式补全光标前的单词

<BS> 或 CTRL-H	  删除光标前的一个字符
<Del>		  删除光标下的一个字符
CTRL-W		  删除光标前的一个单词
CTRL-U		  删除当前行的所有字符
CTRL-T		  在当前行首插入一个移位宽度的缩进
CTRL-D		  从当前行首删除一个移位宽度的缩进
0 CTRL-D	  删除当前行的所有缩进
^ CTRL-D	  删除当前行的所有缩进，恢复下一行的缩进
------------------------------------------------------------------------------
特殊插入

:r [file]	   将文件 [file] 的内容插入到光标之下
:r! {command}   将命令 {command}  的标准输出插入到光标之下
------------------------------------------------------------------------------
删除文本

x		删除光标之下及之后的 N 个字符
<Del>	删除光标之下及之后的 N 个字符
X		删除光标之前的 N 个字符
d{motion}	删除动作 {motion} 覆盖的文本
{visual}d	删除高亮的文本
dd		删除 N 行
D		删除至行尾 (及 N - 1 后续行)
J		连接 N - 1 行 (删除 <EOL>)
{visual}J	连接高亮的行
gJ		同 "J"，但不插入空格
{visual}gJ	同 "{visual}J"，但不插入空格
:[range]d [x]	删除范围 [range] 覆盖的行 [存入寄存器 x]
------------------------------------------------------------------------------
复制与移动文本

"{char}	在接下来的删除、抽出或放置命令中使用寄存器 {char}
:reg		显示所有寄存器的内容
:reg {arg}	显示寄存器 {arg} 的内容
y{motion}	将动作 {motion} 覆盖的文本抽出至一个寄存器
{visual}y	将高亮的文本抽出至一个寄存器
yy		抽出 N 行至寄存器
Y		抽出 N 行至寄存器
p		将一个寄存器的内容放置在光标位置后 (N 次)
P		将一个寄存器的内容放置在光标位置前 (N 次)
]p		同 p，但调整当前行的缩进
[p		同 P，但调整当前行的缩进
gp		同 p，但将光标留在新文本之后
gP		同 P，但将光标留在新文本之后
------------------------------------------------------------------------------
	改变文本

r{char}	以 {char} 替换 N 个字符
gr{char}	替换 N 个字符并不影响布局
R		进入替换模式 (重复键入的文本 N 次)
|gR|	  N  gR		进入虚拟替换模式: 同替换模式，但不影响布局
|v_b_r|	     {visual}r{char} 在可视列块模式下: 以 {char} 替换选中文本的每个字符

c	(修改 = 删除文本并进入插入模式)
c{motion}	修改动作 {motion} 覆盖的文本
{visual}c	修改高亮的文本
cc		修改 N 行
S		修改 N 行
C		修改至行尾 (及 N - 1 后续行)
s		修改 N 个字符
{visual}c	在可视列块模式下: 用键入的文本修改选中文本的每一行
{visual}C	在可视列块模式下: 用键入的文本修改选中各行直至行末

~		翻转 N 个字符的大小写并前进光标
{visual}~	翻转高亮文本的大小写
{visual}u	改高亮的文本为小写
{visual}U	改高亮的文本为大写
g~{motion} 将动作 {motion} 覆盖的文本翻转大小写
gu{motion} 将动作 {motion} 覆盖的文本改为小写
gU{motion} 将动作 {motion} 覆盖的文本改为大写
{visual}g? 对高亮的文本做 rot13 编码
g?{motion} 对动作 {motion} 覆盖的文本做 rot13 编码

CTRL-A	将光标之上或之后的数值增加 N
CTRL-X	将光标之上或之后的数值减少 N

<{motion}	将动作 {motion} 覆盖的所有行向左移动一个移位宽度
<<		将 N 行向左移动一个移位宽度
>{motion}	将动作 {motion} 覆盖的所有行向右移动一个移位宽度
>>		将 N 行向右移动一个移位宽度 
gq{motion}	将动作 {motion} 覆盖的所有行进行排版到 'textwidth' 宽
:[range]ce[nter] [width] 将范围 [range] 包括的行居中对齐
:[range]le[ft] [indent] 将范围 [range] 中的行靠左对齐 (使用 [indent])
:[range]ri[ght] [width] 将范围 [range] 中的行靠右对齐
------------------------------------------------------------------------------
	复杂改动

  !{motion}{command}<CR> 将动作覆盖的行用命令 {command} 过滤
   N  !!{command}<CR> 将 N 行用命令 {command} 过滤
      {visual}!{command}<CR> 将高亮的行用命令 {command} 过滤
  :[range]! {command}<CR> 将范围 [range] 包括的行用命令 {command} 过滤
  ={motion} 将动作覆盖的行用 'equalprg' 过滤
   N  ==	将 N 行用 'equalprg' 过滤
      {visual}= 将高亮的行用 'equalprg' 过滤
   :[range]s[ubstitute]/{pattern}/{string}/[g][c] 以 {string} 替代范围 [range] 包括的行中的 {pattern}；
	   与 [g] 共用，替代所有的出现的 {pattern}；
	   与 [c] 共用，确认每一次替代
   :[range]s[ubstitute] [g][c]
	以新的范围和选项重复上一次的 ":s" 命令
  &		不带选项在当前行上重复上一次的 ":s" 命令
   :[range]ret[ab][!] [tabstop]
	置 'tabstop' 为新值并依据此值调整空白字符
------------------------------------------------------------------------------
*Q_vi*		可视模式

|visual-index|	可视模式命令列表。

|v|	   v		以字符方式开始高亮	       }  移动光标或使用
|V|	   V		以行方式开始高亮	       }  操作符来作用于
|CTRL-V|   CTRL-V	以列块方式开始高亮	       }  高亮的文本
|v_o|	   o		交换高亮区域的开始处和光标位置
|gv|	   gv		使用上一次的可视区域开始高亮
|v_v|	   v		以字符方式开始高亮或停止高亮
|v_V|	   V		以行方式开始高亮或停止高亮
|v_CTRL-V| CTRL-V	以列块方式开始高亮或停止高亮
------------------------------------------------------------------------------
文本对象 (仅适用于可视模式或在操作符后)

aw	选择 "一个单词"                   (a word)
iw	选择 "内含单词"                   (inner word)
aW	选择 "一个字串"                   (WORD)
iW	选择 "内含字串"
as	选择 "一个句子"                   (sentence)
is	选择 "内含句子"
ap	选择 "一个段落"                   (paragraph)
ip	选择 "内含段落"
ab	选择 "一个块" (从 "[(" 至 "])")   (block)
ib	选择 "内含块" (从 "[(" 到 "])")
aB	选择 "一个大块" (从 "[{" 到 "]}") (Block)
iB	选择 "内含大块" (从 "[{" 到 "]}")
a>	选择 "一个 <> 块"
i>	选择 "内含 <> 块"
at	选择 "一个标签块" (从 <aaa> 到 </aaa>) (tag)
it	选择 "内含标签块" (从 <aaa> 到 </aaa>)
a'	选择 "一个单引号字符串"
i'	选择 "内含单引号字符串"
a"	选择 "一个双引号字符串"
i"	选择 "内含双引号字符串"
a`	选择 "一个反引号字符串"
i`	选择 "内含反引号字符串"

------------------------------------------------------------------------------
  重复命令

.		重复最近一次改动 (将计数改为 N)
q{a-z}	记录键入的字符，存入寄存器 {a-z}
q{A-Z}	记录键入的字符，添加进寄存器 {a-z}
q		终止记录
@{a-z}	执行寄存器 {a-z} 的内容 (N 次)
 N  @@	重复上次的 @{a-z} 操作 (N 次)
 :@{a-z}	将寄存器 {a-z} 的内容当作 Ex 命令来执行
 :@@		重复上次的 :@{a-z} 操作
 :[range]g[lobal]/{pattern}/[cmd]
  对 [range] 内所有匹配 {pattern} 的行执行
     Ex 命令 [cmd] (缺省: ":p")
 :[range]g[lobal]!/{pattern}/[cmd]
  对 [range] 内所有_不_匹配 {pattern} 的行执行
     Ex 命令 [cmd] (缺省: ":p")
 :so[urce] {file}
  从文件 {file} 读入 Ex 命令
 :so[urce]! {file}
  从文件 {file} 读入 Vim 命令
 :sl[eep] [sec]
  在 [sec] 秒钟内任何事也不做
   gs	睡 N 秒 (goto sleep)
------------------------------------------------------------------------------
   撤销/重做命令

u		撤销最近的 N 此改动
 N  CTRL-R	重做最近的 N 个被撤销的改动
U		恢复最近被改动的行
---------------------------------------------------------------------
   外部命令

   :sh[ell]	开启一个 shell
   :!{command}	通过一个 shell 执行命令 {command}
  K		用 'keywordprg' 程序 (缺省: "man") 查光标下的
				   关键字
------------------------------------------------------------------------------
   其他移动

      CTRL-L	清除并重画屏幕
      CTRL-G	显示当前文件名 (包括路径) 和光标位置
      ga		以十进制、十六进制和八进制显示当前光标下的字符
   	   的 ASCII 值
      g8		对 utf-8 编码: 显示光标所在字符的十六进制字节
   	   序列
	   g CTRL-G	显示当前光标的列、行、以及字符位置
      CTRL-C	在查找中: 中断查找
   CTRL-Break	MS-DOS: 在查找中: 中断查找
      <Del>	当输入一个计数时: 删除前一个输入字符
	:ve[rsion]	显示版本信息
   :mode N		MS-DOS: 置屏幕模式为 N (数值、C80、C4350 等)
	:norm[al][!] {commands}
   	执行普通模式命令
  Q		切换至 "Ex" 模式

   :redir >{file}		重定向消息至文件 {file}
	:silent[!] {command}	安静地执行 {command} 命令
	:confirm {command}	退出、写入等有未保存的改动或文件只读时
  		   询问
	:browse {command}	使用文件选择对话框打开/读入/写入文件
------------------------------------------------------------------------------
*Q_ce*		命令行编辑

|c_<Esc>|	<Esc>		   放弃命令行 (如果 'wildchar' 通配符是
				      <Esc>，键入两次)

|c_CTRL-V|	CTRL-V {char}	   按字面插入 {char}
|c_CTRL-V|	CTRL-V {number}    输入十进制数表示的字符 (可达 3 个数位)
|c_CTRL-K|	CTRL-K {char1} {char2}
				   键入二合字母 (参见 |Q_di|)
|c_CTRL-R|	CTRL-R {0-9a-z"%#:-=}
				   插入指定寄存器的内容

|c_<Left>|	<Left>/<Right>	   光标左移/右移
|c_<S-Left>|	<S-Left>/<S-Right> 光标左移/右移一个单词
|c_CTRL-B|	CTRL-B/CTRL-E	   光标移动至命令行行首/行尾

|c_<BS>|	<BS>		   删除光标前的字符
|c_<Del>|	<Del>		   删除光标下的字符
|c_CTRL-W|	CTRL-W		   删除光标前的单词
|c_CTRL-U|	CTRL-U		   删除所有字符

|c_<Up>|	<Up>/<Down>	   搜索以当前命令行开始的较早/较晚的命令
|c_<S-Up>|	<S-Up>/<S-Down>	   从命令行历史中回忆较早/较晚的命令
|:history|	:his[tory]	   显示命令行历史

上下文关联的命令行补全:

	'wildchar'  (缺省: <Tab>)
	根据光标前的命令行补全；如果有多个匹配，响铃并
	显示第一个；继续 'wildchar' 将显示下一个匹配
CTRL-D		列出匹配光标前的模式的可能的匹配
CTRL-A		插入匹配光标前的模式的所有的匹配
CTRL-L		插入所有匹配当前模式的名字的最长的共同部分
CTRL-N		在 'wildchar' 之后存在多个匹配时: 至下一匹配
CTRL-P		在 'wildchar' 之后存在多个匹配时: 至上一匹配
------------------------------------------------------------------------------
Ex 范围

,		分隔两个行号
;		同上，但在解释第二个行号之前先移动光标至第一个
	行号代表的行

{number}	绝对行号
.		当前行
$		文件的最后一行
%		等同于 1,$ (整个文件)
*		等同于 '<,'> (可视区域)
't		位置标记 t 的位置
/{pattern}[/]	下一个匹配 {pattern} 的行
?{pattern}[?]	前一个匹配 {pattern} 的行

+[num]		在前面的行号上加 [num] (缺省: 1)
-[num]		从前面的行号里减 [num] (缺省: 1)
------------------------------------------------------------------------------
*Q_ex*		特殊 Ex 字符

|		分隔两个命令 (不适用于 ":global" 及 ":!")
"		开始注释

%		当前文件名 (仅当期望文件名时)
#[num]	第 [num] 个轮换文件名 (仅当期望文件名时)
	注: 以下七项以字面意思键入；并非特殊键！
<abuf>	缓冲区号，用于自动命令 (仅当期望文件名时)
<afile>	文件名，用于自动命令 (仅当期望文件名时)
<amatch>	匹配模式的内容，用于自动命令 (仅当期望文件名时)
<cword>	光标下的单词 (仅当期望文件名时)
<cWORD>	光标下的字串 (仅当期望文件名时)
<cfile>	光标下的文件名 (仅当期望文件名时)
<sfile>	":source" 的文件里该文件的文件名 (仅当期望文件名时)

		在 "%"、"#"、"<cfile>"、"<sfile>" 或 "<afile>" 之后
:p		完整路径
:h		头部 (除去文件名)
:t		尾部 (仅使用文件名)
:r		根部 (除去扩展名)
:e		扩展名
:s/{pat}/{repl}/	以 {repl} 替换 {pat}
------------------------------------------------------------------------------
*Q_ed*		文件编辑

		无 !: 若当前缓冲区已被改动则失败
		有 !: 放弃任何对当前缓冲区的改动
:e[dit][!] {file}	编辑 {file}
:e[dit][!]		重新载入当前文件
:ene[w][!]		编辑一个无名的新缓冲区
:fin[d][!] {file}	在 'path' 当中查找文件 {file} 并编辑之

N   CTRL-^		编辑第 N 个轮换文件名 (同 ":e #N")
    gf  或 ]f	编辑光标下的文件名对应的文件 (goto file)
:pwd			显示当前目录名
:cd [path]		切换当前目录到 [path]
:cd -		回到上一次当前目录
:f[ile]		显示当前文件名及光标位置
:f[ile] {name}	置当前文件名为 {name}
:files		显示所有的轮换文件名
------------------------------------------------------------------------------
 使用参数列表				|argument-list|

:ar[gs]		显示参数列表，当前文件显示在 "[]" 中
:all  或 :sall	为参数列表中的每个文件打开一个窗口
:wn[ext][!]		写入当前文件并编辑下一个文件
:wn[ext][!] {file}	写到 {file} 并编辑下一个文件，除非文件 {file}
 	   已经存在。使用 !，覆盖已存在的文件
:wN[ext][!] [file]	写入当前文件并编辑前一个文件

在当前窗口		  新建窗口	~
:argu[ment] N	  :sar[gument] N	编辑第 N 个文件
:n[ext]		  :sn[ext]		编辑下一个文件
:n[ext] {arglist}	  :sn[ext] {arglist}	定义新的文件列表并编辑 其中的第一个
:N[ext]		  :sN[ext]		编辑前一个文件
:fir[st]		  :sfir[st]		编辑第一个文件
:la[st]		  :sla[st]		编辑最后一个文件
------------------------------------------------------------------------------
  写入和退出

:[range]w[rite][!]		写入当前文件
:[range]w[rite] {file}	写入至文件 {file}，除非其已经存在
:[range]w[rite]! {file}	写入至文件 {file}。覆盖已存在的文件
:[range]w[rite][!] >>		添加至当前文件
:[range]w[rite][!] >> {file}	添加至文件 {file}
:[range]w[rite] !{cmd}	执行命令 {cmd}，以 [range] 限定的行作 为标准输入
:[range]up[date][!]		如果当前文件被改动则写入
:wa[ll][!]			写入所有被改动的缓冲区

:q[uit]		退出当前缓冲区，除非已经做了改动。如果没有其它 非帮助的缓冲区，退出 Vim
:q[uit]!		强制退出当前缓冲区，放弃所有的改动。如果没有其 它非帮助的缓冲区，退出 Vim
:qa[ll]		退出 Vim，除非作了改动
:qa[ll]!		退出 Vim，放弃所有改动
:cq			退出，不写入文件并返回错误代码

:wq[!]		写入当前文件并退出
:wq[!] {file}		写入文件 {file} 并退出
:x[it][!] [file]	同 ":wq" 但是仅当有改动时写入
ZZ			同 ":x"
ZQ			同 ":q!"
:xa[ll][!]  或 :wqall[!] 写入所有改动的缓冲区并退出

:st[op][!]		挂起 Vim 或开始一个新 shell。如果置位了 'aw' 选项并没有给出 [!] 则写入缓冲区
CTRL-Z		同 ":stop"
------------------------------------------------------------------------------
自动命令

启动时读入寄存器、标记、历史记录，退出时存储这些信息。

:rv[iminfo] [file]	从文件 [file] 读入 viminfo 信息
:rv[iminfo]! [file]	同上，但覆盖已存在的信息
:wv[iminfo] [file]	向文件 [file] 中加入 viminfo 信息
:wv[iminfo]! [file]	向文件 [file] 中写入 viminfo 信息

当编辑一个文件时自动设定的选项

vim:{set-arg}: ..	置于文件的前面或后面数行 (参见 'ml' 选
		   项)，{set-arg} 为传递给 ":set" 命令
		   的参数

特定事件发生时自动执行命令。

:au			列出所有自动命令
:au {event}		列出针对事件 {event} 的所有自动命令
:au {event} {pat}	列出针对事件 {event} 并匹配 {pat} 的所
		   有自动命令
:au {event} {pat} {cmd}	加入针对事件 {event} 及匹配 {pat} 的新
		   自动命令
:au!			清除所有自动命令
:au! {event}		清除所有针对事件 {event} 的自动命令
:au! * {pat}		清除所有匹配 {pat} 的自动命令
:au! {event} {pat}	清除所有针对事件 {event} 及匹配 {pat}
		   的自动命令
:au! {event} {pat} {cmd}  清除所有针对事件 {event} 及匹配
					     {pat} 的自动命令并输入新的
------------------------------------------------------------------------------
多窗口命令

CTRL-W s  或  :split	将窗口分割成两部分          (split)
:split {file}		分隔窗口并在其中一个编辑 {file}
:vsplit {file}		同上，但垂直分割
:vertical {cmd}		使命令 {cmd} 垂直分割
:sf[ind] {file}		分割窗口，从 {path} 中找到文件 {file} 并编辑之
CTRL-W ]		分割窗口并跳转到光标下的标签
CTRL-W f		分割窗口并编辑光标下的文件名 (file)
CTRL-W ^		分割窗口并编辑轮换文件
CTRL-W n  或  :new	创建新空白窗口              (new)
CTRL-W q  或  :q[uit]	退出编辑并关闭窗口          (quit)
CTRL-W c  或  :cl[ose]	隐藏当前缓冲区并关闭窗口    (close)
CTRL-W o  或  :on[ly]	使当前窗口成为唯一窗口      (only)

CTRL-W j		跳转到下方窗口
CTRL-W k		跳转到上方窗口
CTRL-W CTRL-W		移动光标至下方窗口 (折转)   (Wrap)
CTRL-W W		移动光标至上方窗口 (折转)   (wrap)
CTRL-W t		跳转到顶端窗口              (top)
CTRL-W b		跳转到底端窗口              (bottom)
CTRL-W p		跳转到上一次激活的窗口      (previous)

CTRL-W r		向下旋转窗口                (rotate)
CTRL-W R		向上旋转窗口                (Rotate)
CTRL-W x		将当前窗口与下一个窗口对调  (eXchange)

CTRL-W =		使所有窗口等高
CTRL-W -		减少当前窗口高度
CTRL-W +		增加当前窗口高度
CTRL-W _		设置当前窗口高度 (缺省: 很高)
------------------------------------------------------------------------------
缓冲区列表命令

:buffers  或  :files	列出所有已知的缓冲区和文件名

:ball	  或  :sball	编辑所有的参数/缓冲区
:unhide   或  :sunhide	编辑所有载入的缓冲区

:badd {fname}		加入文件名 {fname} 到列表中
:bunload[!] [N]		从内存中卸载缓冲区 [N]
:bdelete[!] [N]		从内存中卸载缓冲区 [N]  并从列表中删除

当前窗口内         新窗口内	~
:[N]buffer [N]     :[N]sbuffer [N]     至参数/缓冲区 N
:[N]bnext [N]      :[N]sbnext [N]      至往后第 N 个参数/缓冲区
:[N]bNext [N]      :[N]sbNext [N]      至往前第 N 个参数/缓冲区
:[N]bprevious [N]  :[N]sbprevious [N]  至往前第 N 个参数/缓冲区
:bfirst            :sbfirst            至第一个参数/缓冲区
:blast             :sblast             至最后一个参数/缓冲区
:[N]bmod [N]       :[N]sbmod [N]       至第 N 个改动过的缓冲区
------------------------------------------------------------------------------
语法高亮

:highlight clear	清除所有高亮信息

------------------------------------------------------------------------------
折叠

zf{motion}	操作符: 手动定义一个折叠    (fold)
:{range}fold		将范围 {range} 包括的行定义为一个折叠
zd			删除光标下的一个折叠        (delete)
zD			删除光标下的所有折叠        (Delete)

zo			打开光标下的折叠            (open)
zO			打开光标下的所有折叠        (Open)
zc			关闭光标下的一个折叠        (close)
zC			关闭光标下的所有折叠        (Close)

zm			折起更多: 减少 'foldlevel'  (more)
zM			关闭所有折叠: 置 'foldlevel' 为 0
zr			减少折叠: 增加 'foldlevel'  (reduce)
zR			打开所有折叠: 置 'foldlevel' 为最大

zn			不折叠: 复位 'foldenable'   (none)
zN			正常折叠: 置位 'foldenable' (Normal)
zi			反转 'foldenable'           (invert)

